Index.php


<a href="/product/{{$pro->id}}"><img src="{{ URL::to('/images/upload/'.$pro->images)}}" alt="" width="20%"></a>


This Term product Id displaying URL so easy attack possible
 
  $id=$id;
  $product['product']=product::where('id',$id)->first();




So i added encrypt/Decrypt 
  <a href="/buy/{{\Crypt::encrypt($product->id)}}" 


$id=\Crypt::decrypt($id);


 This functionality added to variables value not displaying , displaying text for Encrypt text








Product Query page :


 public function store(Request $request)
    {
        //
        $sale=new sale;
        $sale->name=$request->name;
        $sale->email=$request->email;
        $sale->mob=$request->contact;
        $sale->add=$request->add;
        $sale->pid=$request->pid;




       // $cached = serialize($sale);


      //  echo $cached;




       if($sale->save())
        {
        
            return redirect('/')->with('status', 'Successfully seller Contact soon');


         }
    }


This method code Not sanitize all input so possible to XSS attack for RXSS attack and   SXSS attack so i writed sanitize input functionality for 






So i will add 
strip_tags() method


First i create 


php artisan make:middleware XssSanitizer
Now, you can see new file in app/Http/Middleware/XssSanitizer.php and just put bellow code in your XssSanitizer.php file.


namespace App\Http\Middleware;


use Closure;


use Illuminate\Http\Request;


class XssSanitizer


{


    public function handle(Request $request, Closure $next)


    {


        $input = $request->all();


        array_walk_recursive($input, function(&$input) {


            $input = strip_tags($input);


        });


        $request->merge($input);


        return $next($request);


    }


}


Now register our middleware in our app/Http/Kernel.php file. and add following line in $routeMiddleware array.
       'XssSanitizer' => \App\Http\Middleware\XssSanitizer::class,
I added this 
Now using XssSanitizer middleware in our routes.
Route::group(['middleware' => ['XssSanitizer']], function () {


  Route::get('view-register', 'RegisterController@viewRegisterPage');




  Route::post('register', 'RegisterController@registerAction);


});




https://www.codementor.io/@decodeweb/form-validation-and-user-input-sanitization-tricks-in-laravel-13or97pfog




 












Command injection : 


        // Determine OS and execute the ping command. 
 if( stristr( php_uname( 's' ), 'Windows NT' ) ) {  // Windows 
 $cmd = shell_exec( 'ping ' . $target ); 
 } 
 else { 
 // *nix 
 $cmd = shell_exec( 'ping -c 4 ' . $target );  } 


This code vulnerable for command injection so not vulnerable code for 




if( isset( $_POST[ 'Submit' ]  ) ) {
    // Check Anti-CSRF token
    checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' );


    // Get input
    $target = $_REQUEST[ 'ip' ];
    $target = stripslashes( $target );


    // Split the IP into 4 octects
    $octet = explode( ".", $target );


    // Check IF each octet is an integer
    if( ( is_numeric( $octet[0] ) ) && ( is_numeric( $octet[1] ) ) && ( is_numeric( $octet[2] ) ) && ( is_numeric( $octet[3] ) ) && ( sizeof( $octet ) == 4 ) ) {
        // If all 4 octets are int's put the IP back together.
        $target = $octet[0] . '.' . $octet[1] . '.' . $octet[2] . '.' . $octet[3];


        // Determine OS and execute the ping command.
        if( stristr( php_uname( 's' ), 'Windows NT' ) ) {
            // Windows
            $cmd = shell_exec( 'ping  ' . $target );
        }
        else {
            // *nix
            $cmd = shell_exec( 'ping  -c 4 ' . $target );
        }


        // Feedback for the end user
        echo "<pre>{$cmd}</pre>";
    }
    else {
        // Ops. Let the user name there's a mistake
        echo '<pre>ERROR: You have entered an invalid IP.</pre>';
    }
}


// Generate Anti-CSRF token
generateSessionToken();


?>


PHP Object Injections :




Latest Version Update avoid php object injection magic method




Php  object injection enables the arbitrary manipulation of an object content that shall be unserialized using the PHP unserialize() function.
The correct exploitability of this type of vulnerabilities requires the presence of 2 basic interconnected elements:
1. The unserialization of an object which manipulation is feasible from the user’s side (i.e. a cookie storing data as a serialized object)
2. The use of a magic method (__wakeup, __destroy…) that can be abused in order to achieve interesting actions from a malicious user’s perspective (commands remote execution, file manipulation, etc.).
References :


https://medium.com/swlh/exploiting-php-deserialization-56d71f03282a
https://blog.ripstech.com/2018/php-object-injection/
https://www.tarlogic.com/en/blog/how-php-object-injection-works-php-object-injection/
https://www.youtube.com/watch?v=tGaVqCzhEls
https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Insecure%20Deserialization/PHP.md